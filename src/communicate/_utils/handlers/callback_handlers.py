import logging
from ast import literal_eval

from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from _dependencies.commons import SearchFollowingMode

from ..buttons import TopicTypeInlineKeyboardBuilder, reply_markup_main
from ..common import (
    NOT_FOLLOWING_MARK,
    HandlerResult,
    UpdateBasicParams,
    UpdateExtraParams,
)
from ..database import db
from ..decorators import callback_handler
from ..message_sending import tg_api


@callback_handler(keyboard_name=TopicTypeInlineKeyboardBuilder.keyboard_code)
def handle_topic_type_user_changed(
    update_params: UpdateBasicParams, extra_params: UpdateExtraParams
) -> tuple[str, InlineKeyboardMarkup]:
    """Save user Topic Type preference and generate the actual topic type preference message"""

    user_callback = update_params.got_callback
    callback_id = update_params.callback_query_id
    user_id = update_params.user_id

    welcome_message = (
        '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ–º–µ–Ω—è—Ç—å, –ø–æ –∫–∞–∫–∏–º —Ç–∏–ø–∞–º –ø–æ–∏—Å–∫–æ–≤ –∏–ª–∏ '
        '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.'
    )
    bot_message = welcome_message

    if user_callback and user_callback['action'] == 'about':
        # when user push "ABOUT" button
        return _handle_topic_type_pressed_about(update_params, welcome_message)

    # when user pushed INLINE BUTTON for topic type
    list_of_ids_to_change_now = []
    list_of_current_setting_ids = db().check_saved_topic_types(user_id)
    topic_id = TopicTypeInlineKeyboardBuilder.get_topic_id_by_button(user_callback)
    assert topic_id is not None  # would be None only if "about" pushed

    list_of_ids_to_change_now = [topic_id]
    user_wants_to_enable = TopicTypeInlineKeyboardBuilder.if_user_enables(user_callback)
    if user_wants_to_enable is None:
        flash_message = ''
        pass
    elif user_wants_to_enable is True:  # not a poor design ‚Äì function can be: None, True, False   # noqa
        flash_message = '–°—É–ø–µ—Ä, –º—ã –≤–∫–ª—é—á–∏–ª–∏ —ç—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        tg_api().send_callback_answer_to_api(update_params.user_id, callback_id, flash_message)
        db().record_topic_type(user_id, topic_id)
    else:  # user_wants_to_enable == False:  # not a poor design ‚Äì function can be: None, True, False # noqa
        if len(list_of_current_setting_ids) == 1:
            flash_message = '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'
            list_of_ids_to_change_now = []
            tg_api().send_callback_answer_to_api(update_params.user_id, callback_id, flash_message)
        else:
            flash_message = '–•–æ—Ä–æ—à–æ, –º—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫'
            tg_api().send_callback_answer_to_api(update_params.user_id, callback_id, flash_message)
            db().delete_user_saved_topic_type(user_id, topic_id)

    keyboard = TopicTypeInlineKeyboardBuilder.get_keyboard(list_of_current_setting_ids, list_of_ids_to_change_now)
    reply_markup = InlineKeyboardMarkup(keyboard)

    return bot_message, reply_markup


def _handle_topic_type_pressed_about(
    update_params: UpdateBasicParams, welcome_message: str
) -> tuple[str, InlineKeyboardMarkup]:
    """This scenario assumes three steps:
    1. send the "ABOUT" message,
    2. delete prev MENU message
    3. send NEW MENU"""

    callback_query = update_params.callback_query
    user_id = update_params.user_id

    about_text = (
        '–õ–∏–∑–∞–ê–ª–µ—Ä—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –í –ë–æ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑ '
        '–Ω–∏—Ö:\n\n'
        '‚Ä¢ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏</b> ‚Äì —ç—Ç–æ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø–æ–∏—Å–∫–∏: –ø–æ—Ç–µ—Ä—è–ª—Å—è —á–µ–ª–æ–≤–µ–∫, –Ω—É–∂–Ω–æ –µ–≥–æ '
        '–Ω–∞–π—Ç–∏, —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏. 90% –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n'
        '‚Ä¢ <b>–†–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–µ –ø–æ–∏—Å–∫–∏</b> (–∏–ª–∏ "–†–µ–∑–æ–Ω–∞–Ω—Å—ã") ‚Äì —ç—Ç–æ —Å—Ä–æ—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞. '
        '–ù–∞ —Ç–∞–∫–∏–µ –ø–æ–∏—Å–∫–∏ –ø—Ä–∏–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.\n'
        '‚Ä¢ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äì —ç—Ç–æ –ø–æ–∏—Å–∫–∏, –∫–æ–≥–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–µ–∑–¥ –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—ã–µ '
        '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∞ –ª–∏—à—å —Ç—Ä–µ–±—É—é—Ç –ø–æ–º–æ—â–∏ –≤ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–ø–∞–≤—à–µ–º –≤ –≤ —Å–æ—Ü —Å–µ—Ç—è—Ö.\n'
        '‚Ä¢ <b>–û–±—Ä–∞—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–∏</b> (–ø–æ–∏—Å–∫–∏ —Ä–æ–¥–Ω—ã—Ö) ‚Äì –±—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω–∞—Ö–æ–¥—è—Ç –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç '
        '—Å–æ–æ–±—â–∏—Ç—å, –∫—Ç–æ –æ–Ω–∏, –≥–¥–µ –æ–Ω–∏ –∂–∏–≤—É—Ç (–ø–æ—Ç–µ—Ä—è –ø–∞–º—è—Ç–∏). –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ '
        '—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.\n'
        '‚Ä¢ <b>–£—á–µ–±–Ω—ã–µ –ø–æ–∏—Å–∫–∏</b> ‚Äì —ç—Ç–æ –≤–∞–∂–Ω—ã–µ –ø–æ–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã –õ–∏–∑–∞–ê–ª–µ—Ä—Ç, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω—ã'
        '–ø–æ —É—Å–ª–æ–≤–∏—è–º –∫ —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–∞–º –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–∑–≤–∞–Ω—ã –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ —Å–ø–∞—Å–µ–Ω–∏—è'
        '–ª—é–¥–µ–π –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –°–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ –æ—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ '
        '–£—á–µ–±–Ω—ã—Ö –ø–æ–∏—Å–∫–∞—Ö, —á—Ç–æ–±—ã –ø–æ–≤—ã—à–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞.\n'
        '‚Ä¢ <b>–ù–æ—á–Ω–æ–π –ø–∞—Ç—Ä—É–ª—å</b> ‚Äì –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –Ω–æ—á–Ω—ã–µ –ø–∞—Ç—Ä—É–ª–∏ –≤ –ø–∞—Ä–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö '
        '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–æ–Ω–∞—Ö.\n'
        '‚Ä¢ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b> ‚Äì —ç—Ç–æ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏, –ø—Ä–æ–≤–æ–¥–∏–º—ã–µ –æ—Ç—Ä—è–¥–∞–º–∏ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç. –¢–µ–º–∞—Ç–∏–∫–∞ –∏ '
        '–∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–∏–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä—É—é—Ç—Å—è –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞ –∫ —Ä–µ–≥–∏–æ–Ω—É. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, '
        '—á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –≤ –æ—Ç—Ä—è–¥–µ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. üí°'
    )
    about_params = {'chat_id': user_id, 'text': about_text, 'parse_mode': 'HTML'}
    tg_api().send_message(about_params, "main() if ... user_callback['action'] == 'about'")
    del_message_id = callback_query.message.message_id if callback_query and callback_query.message else None
    if del_message_id:  ###was get_last_user_inline_dialogue( user_id)
        tg_api().delete_message(user_id, del_message_id)
        bot_message = f'‚¨ÜÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –≤—ã—à–µ. \n\n{welcome_message}'

    list_of_current_setting_ids = db().check_saved_topic_types(user_id)
    keyboard = TopicTypeInlineKeyboardBuilder.get_keyboard(list_of_current_setting_ids, [])
    return bot_message, InlineKeyboardMarkup(keyboard)


@callback_handler(actions=['search_follow_mode_on', 'search_follow_mode_off'])
def handle_search_follow_mode(update_params: UpdateBasicParams, extra_params: UpdateExtraParams) -> HandlerResult:
    """Switches search following mode on/off"""

    user_callback = update_params.got_callback
    callback_query = update_params.callback_query
    callback_id = update_params.callback_query_id
    user_id = update_params.user_id

    logging.info(f'{callback_query=}, {user_id=}')
    # when user pushed INLINE BUTTON for topic following
    if user_callback and user_callback['action'] == 'search_follow_mode_on':
        db().set_search_follow_mode(user_id, True)
        bot_message = '–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω.'

    elif user_callback and user_callback['action'] == 'search_follow_mode_off':
        db().set_search_follow_mode(user_id, False)
        bot_message = '–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω.'

    tg_api().send_callback_answer_to_api(update_params.user_id, callback_id, bot_message)

    return bot_message, reply_markup_main


@callback_handler(actions=['search_follow_mode'])
def manage_search_whiteness(
    update_params: UpdateBasicParams, extra_params: UpdateExtraParams
) -> tuple[str, InlineKeyboardMarkup]:
    """Saves search_whiteness (accordingly to user's choice of search to follow) and regenerates the search list keyboard"""
    user_callback = update_params.got_callback
    callback_query = update_params.callback_query

    bot_message = ''

    # issue#425 inspired by manage_topic_type
    ################# ToDo further: modify select in compose_notifications

    # when user pushed INLINE BUTTON for topic following
    if not user_callback or user_callback['action'] != 'search_follow_mode':
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ–Ω—É –ø–æ–º–µ—Ç–∫–∏', InlineKeyboardMarkup([])

    # get inline keyboard from previous message to update it
    source_reply_markup = callback_query.message.reply_markup  # type:ignore [union-attr]
    source_keyboard = source_reply_markup.inline_keyboard  # type:ignore [union-attr]

    search_num = int(user_callback['hash'])
    pushed_row_index = _get_pressed_button_row_index(source_reply_markup, search_num)  # type:ignore [union-attr, arg-type]
    if pushed_row_index is None:
        logging.error(f'cannot find pressed button. {search_num=} {source_keyboard=}')
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ–Ω—É –ø–æ–º–µ—Ç–∫–∏', InlineKeyboardMarkup([])

    new_ikb = list(source_keyboard)
    old_button = source_keyboard[pushed_row_index][0]
    new_mark_value, flash_message = _get_new_button_state_and_message(old_button)
    new_button = InlineKeyboardButton(
        text=new_mark_value + old_button.text[2:],
        callback_data=old_button.callback_data,
    )
    new_ikb[pushed_row_index] = [new_button, new_ikb[pushed_row_index][1]]

    db().record_search_whiteness(update_params.user_id, search_num, new_mark_value)
    tg_api().send_callback_answer_to_api(update_params.user_id, update_params.callback_query_id, flash_message)

    #        if pushed_row_index %2 ==0:##redundant because there is if user_used_inline_button
    #            api_callback_edit_inline_keyboard(bot_token, callback_query, reply_markup, user_id)

    # TODO should we remove old message and keyboard?
    bot_message = callback_query.message.text  # type:ignore [assignment,union-attr]
    return bot_message, InlineKeyboardMarkup(new_ikb)


def _get_new_button_state_and_message(button_to_change: InlineKeyboardButton) -> tuple[str, str]:
    old_mark_value = button_to_change.text[:2]

    transitions = {
        SearchFollowingMode.ON: (SearchFollowingMode.OFF, '–ü–æ–∏—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.'),
        SearchFollowingMode.OFF: (NOT_FOLLOWING_MARK, '–ü–æ–º–µ—Ç–∫–∞ —Å–Ω—è—Ç–∞.'),
        NOT_FOLLOWING_MARK: (SearchFollowingMode.ON, '–ü–æ–∏—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.'),
    }
    return transitions[old_mark_value]


def _get_pressed_button_row_index(markup: InlineKeyboardMarkup, pressed_button_hash: int) -> int | None:
    ikb = markup.inline_keyboard
    for index, ikb_row in enumerate(ikb):
        logging.info(f'{ikb_row=}')
        if ikb_row[0].callback_data:
            button_data = literal_eval(str(ikb_row[0].callback_data))
            # Check if the pushed button matches the one in the callback

            if button_data.get('hash') and int(button_data['hash']) == pressed_button_hash:
                return index

    return None
